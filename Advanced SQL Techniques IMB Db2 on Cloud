Exercise 1: Using Joins
You have been asked to produce some reports about the communities and crimes in the Chicago area. You will need to use SQL join queries to access the data stored across multiple tables.

Question 1.1
Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.

SELECT
CPS.NAME_OF_SCHOOL,
CPS.COMMUNITY_AREA_NAME,
CPS.AVERAGE_STUDENT_ATTENDANCE,
CSD.HARDSHIP_INDEX
FROM CHICAGO_PUBLIC_SCHOOL CPS
LEFT OUTER JOIN CHICAGO_SOCIOECONOMIC_DATA CSD ON CPS.COMMUNITY_AREA_NAME = CSD.COMMUNITY_AREA_NAME
WHERE HARDSHIP_INDEX = 98

Question 1.2
Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.

select
CC.CASE_NUMBER,
CC.PRIMARY_TYPE,
CSD.COMMUNITY_AREA_NAME,
CC.LOCATION_DESCRIPTION
FROM CHICAGO_CRIME CC
LEFT OUTER JOIN CHICAGO_SOCIOECONOMIC_DATA CSD 
ON CC.COMMUNITY_AREA_NUMBER = CSD.COMMUNITY_AREA_NUMBER
WHERE CC.LOCATION_DESCRIPTION LIKE '%SCHOOL%'

Exercise 2: Creating a View
For privacy reasons, you have been asked to create a view that enables users to select just the school name and the icon fields from the CHICAGO_PUBLIC_SCHOOLS table. By providing a view, you can ensure that users cannot see the actual scores given to a school, just the icon associated with their score. You should define new names for the view columns to obscure the use of scores and icons in the original table.

Question 2.1
Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.

CREATE VIEW SCHOOLS_DATA (SCHOOL_NAME, SAFETY_RATING, FAMILY_RATING, ENVIRONMENT_RATING, INSTRUCTION_RATING, LEADERS_RATING, tEACHERS_RATING) 
AS SELECT NAME_OF_SCHOOL, SAFETY_ICON, FAMILY_ENVIRONMENT, ENVIRONMENT_ICON, INCTRUCTION_ICON, LEADERS_ICON, TEACHERS_ICON
FROM CHICAGO_PUBLIC_SCHOOL

Question 2.2
Write and execute a SQL statement that returns all of the columns from the view.

SELECT *
FROM SCHOOLS_DATA

Question 2.3
Write and execute a SQL statement that returns just the school name and leaders rating from the view.

SELECT SCHOOL_NAME, LEADERS_RATING
FROM SCHOOLS_DATA

Exercise 3: Creating a Stored Procedure
The icon fields are calculated based on the value in the corresponding score field. You need to make sure that when a score field is updated, the icon field is updated too. To do this, you will write a stored procedure that receives the school id and a leaders score as input parameters, calculates the icon setting and updates the fields appropriately.

Question 1
Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer. Donâ€™t forget to use the #SET TERMINATOR statement to use the @ for the CREATE statement terminator.

--#SET TERMINATOR @
CREATE PROCEDURE UPDATE_LEADERS_SCORE(
IN in_School_ID INTEGER,
IN in_Leader_Score INTEGER)

LANGUAGE SQL
READS SQL DATA

DYNAMIC RESULT SETS 1

BEGIN

DECLARE C1 CURSOR
WITH RETURN FOR 

SELECT * FROM chicago_public_schools;

OPEN C1;
	
END 

@

Question 2
Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(
IN in_School_ID INTEGER,
IN in_Leader_Score INTEGER)

LANGUAGE SQL 
MODIFIES SQL DATA 

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS 
	SET "LEADERS_SCORE" = in_Leader_Score
	WHERE "SCHOOL_ID" = in_School_ID;
  
END 

@

Question 3
Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(
IN in_School_ID INTEGER,
IN in_Leader_Score INTEGER)

LANGUAGE SQL 
MODIFIES SQL DATA 

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS 
	SET "LEADERS_SCORE" = in_Leader_Score
	WHERE "SCHOOL_ID" = in_School_ID;
		IF in_Leader_Score > 0 AND in_Leader_Score < 20 
		THEN 
			UPDATE chicago_public_schools 
				SET "LEADERS_ICON" = 'Very Weak';
	ELSEIF in_Leader_Score < 40 THEN
		UPDATE chicago_public_schools
			SET "LEADERS_ICON" = 'Weak';
	ELSEIF in_Leader_Score < 60 THEN
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Average';
	ELSEIF in_Leader_Score < 80 THEN 
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Strong';
	ELSEIF in_Leader_Score < 100 THEN 
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Very Strong';
  END IF;
  
END 

@  
  
Question 4
Run your code to create the stored procedure.
Write a query to call the stored procedure, passing a valid school ID and a leader score of 50, to check that the procedure works as expected.

ALTER TABLE chicago_public_schools 
	ALTER COLUMN LEADERS_ICON
	SET DATA TYPE VARCHAR (15);
	
CALL UPDATE_LEADERS_SCORE(610513, 50)


Exercise 4: Using Transactions
You realise that if someone calls your code with a score outside of the allowed range (0-99), then the score will be updated with the invalid data and the icon will remain at its previous value. There are various ways to avoid this problem, one of which is using a transaction.

Question 1
Update your stored procedure definition. Add a generic ELSE clause to the IF statement that rolls back the current work if the score did not fit any of the preceding categories.

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(
IN in_School_ID INTEGER,
IN in_Leader_Score INTEGER)

LANGUAGE SQL 
MODIFIES SQL DATA 

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS 
	SET "LEADERS_SCORE" = in_Leader_Score
	WHERE "SCHOOL_ID" = in_School_ID;
		IF in_Leader_Score > 0 AND in_Leader_Score < 20 
		THEN 
			UPDATE chicago_public_schools 
				SET "LEADERS_ICON" = 'Very Weak';
	ELSEIF in_Leader_Score < 40 THEN
		UPDATE chicago_public_schools
			SET "LEADERS_ICON" = 'Weak';
	ELSEIF in_Leader_Score < 60 THEN
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Average';
	ELSEIF in_Leader_Score < 80 THEN 
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Strong';
	ELSEIF in_Leader_Score < 100 THEN 
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Very Strong';
	ELSE 
		ROLLBACK WORK;
    
  END IF;
  
END 

@  
Question 2
Update your stored procedure definition again. Add a statement to commit the current unit of work at the end of the procedure.

--#SET TERMINATOR @
CREATE PROCEDURE UPDATE_LEADERS_SCORE(
IN in_School_ID INTEGER,
IN in_Leader_Score INTEGER)

LANGUAGE SQL
READS SQL DATA

DYNAMIC RESULT SETS 1

BEGIN

DECLARE C1 CURSOR
WITH RETURN FOR 

SELECT * FROM chicago_public_schools;

OPEN C1;
	
END 

@

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(
IN in_School_ID INTEGER,
IN in_Leader_Score INTEGER)

LANGUAGE SQL 
MODIFIES SQL DATA 

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS 
	SET "LEADERS_SCORE" = in_Leader_Score
	WHERE "SCHOOL_ID" = in_School_ID;
		IF in_Leader_Score > 0 AND in_Leader_Score < 20 
		THEN 
			UPDATE chicago_public_schools 
				SET "LEADERS_ICON" = 'Very Weak';
	ELSEIF in_Leader_Score < 40 THEN
		UPDATE chicago_public_schools
			SET "LEADERS_ICON" = 'Weak';
	ELSEIF in_Leader_Score < 60 THEN
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Average';
	ELSEIF in_Leader_Score < 80 THEN 
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Strong';
	ELSEIF in_Leader_Score < 100 THEN 
		UPDATE chicago_public_schools 
			SET "LEADERS_ICON" = 'Very Strong';
	ELSE 
		ROLLBACK WORK;
	END IF;
		COMMIT WORK;
	
END 

@
